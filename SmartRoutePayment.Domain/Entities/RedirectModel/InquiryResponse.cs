using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SmartRoutePayment.Domain.Entities.RedirectModel
{
    /// <summary>
    /// Response entity for Transaction Inquiry
    /// Received from SmartRoute after inquiry request
    /// </summary>
    public class InquiryResponse
    {
        /// <summary>
        /// Message status code from SmartRoute
        /// Covers errors generated by SmartRoute
        /// </summary>
        public string MessageStatus { get; set; } = string.Empty;

        /// <summary>
        /// Original transaction status code
        /// </summary>
        public string StatusCode { get; set; } = string.Empty;

        /// <summary>
        /// Purchase amount
        /// </summary>
        public string Amount { get; set; } = string.Empty;

        /// <summary>
        /// ISO formatted currency code (numeric)
        /// </summary>
        public string CurrencyIsoCode { get; set; } = string.Empty;

        /// <summary>
        /// Unique Merchant ID
        /// </summary>
        public string MerchantId { get; set; } = string.Empty;

        /// <summary>
        /// Original transaction identifier
        /// </summary>
        public string TransactionId { get; set; } = string.Empty;

        /// <summary>
        /// Message ID (should be "2" for inquiry response)
        /// </summary>
        public string MessageId { get; set; } = string.Empty;

        /// <summary>
        /// Reversal status of the transaction
        /// Values: Not Reversed, Reversed, Partially Reversed
        /// </summary>
        public string ReversalStatus { get; set; } = string.Empty;

        /// <summary>
        /// Secure hash for response validation
        /// </summary>
        public string SecureHash { get; set; } = string.Empty;

        /// <summary>
        /// Payment method used
        /// </summary>
        public string PaymentMethod { get; set; } = string.Empty;

        /// <summary>
        /// Authorized amount (if MCP enabled)
        /// </summary>
        public string? AuthorizedAmount { get; set; }

        /// <summary>
        /// Authorized currency ISO code (if MCP enabled)
        /// </summary>
        public string? AuthorizedCurrencyIsoCode { get; set; }

        /// <summary>
        /// Gateway status code
        /// </summary>
        public string? GatewayStatusCode { get; set; }

        /// <summary>
        /// Gateway status description
        /// UTF-8 encoded
        /// </summary>
        public string? GatewayStatusDescription { get; set; }

        /// <summary>
        /// Gateway name that processed the transaction
        /// </summary>
        public string? GatewayName { get; set; }

        /// <summary>
        /// Receipt Reference Number
        /// </summary>
        public string? Rrn { get; set; }

        /// <summary>
        /// Approval code from payment processor
        /// </summary>
        public string? ApprovalCode { get; set; }

        /// <summary>
        /// Card expiry date
        /// </summary>
        public string? CardExpiryDate { get; set; }

        /// <summary>
        /// Card holder name
        /// </summary>
        public string? CardHolderName { get; set; }

        /// <summary>
        /// Masked card number
        /// </summary>
        public string? CardNumber { get; set; }

        /// <summary>
        /// Refund status (if IncludeRefundIds was "Yes")
        /// Values: Not Refunded, Refunded, Partially Refunded
        /// </summary>
        public string? RefundStatus { get; set; }

        /// <summary>
        /// Related refund transaction IDs (if IncludeRefundIds was "Yes")
        /// Comma-separated list
        /// </summary>
        public string? RefundIds { get; set; }

        /// <summary>
        /// Issuer name (if Version >= 3.1)
        /// </summary>
        public string? IssuerName { get; set; }

        /// <summary>
        /// Indicates if inquiry was successful
        /// </summary>
        public bool IsSuccess { get; set; }

        /// <summary>
        /// Error message (if any)
        /// </summary>
        public string ErrorMessage { get; set; } = string.Empty;

        /// <summary>
        /// Timestamp when response was processed
        /// </summary>
        public DateTime ProcessedAt { get; set; } = DateTime.UtcNow;
    }
}
