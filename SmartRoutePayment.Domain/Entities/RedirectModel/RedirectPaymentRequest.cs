using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SmartRoutePayment.Domain.Entities.RedirectModel
{
    /// <summary>
    /// Request entity for Redirect Payment (Redirection Communication Model)
    /// Used to redirect customer to SmartRoute payment page
    /// </summary>
    public class RedirectPaymentRequest
    {
        /// <summary>
        /// MessageID = 1 for Redirect Payment
        /// </summary>
        public string MessageId { get; set; } = "1";

        /// <summary>
        /// Unique transaction identifier generated by merchant
        /// Alphanumeric, no special characters or spaces
        /// </summary>
        public string TransactionId { get; set; } = string.Empty;

        /// <summary>
        /// Unique Merchant ID at SmartRoute
        /// </summary>
        public string MerchantId { get; set; } = string.Empty;

        /// <summary>
        /// ISO Formatted amount with no decimal point
        /// Example: 100 for 1.00 USD
        /// </summary>
        public string Amount { get; set; } = string.Empty;

        /// <summary>
        /// ISO formatted code for currency (numeric)
        /// Example: 840 for USD, 682 for SAR
        /// </summary>
        public string CurrencyIsoCode { get; set; } = string.Empty;

        /// <summary>
        /// Generated secure hash using SHA-256
        /// </summary>
        public string SecureHash { get; set; } = string.Empty;

        /// <summary>
        /// Payment description narrative (optional)
        /// UTF-8 encoded
        /// </summary>
        public string? PaymentDescription { get; set; }

        /// <summary>
        /// Interface language (en, ar)
        /// </summary>
        public string Language { get; set; } = "en";

        /// <summary>
        /// Custom item ID (optional)
        /// </summary>
        public string? ItemId { get; set; }

        /// <summary>
        /// Custom theme ID (optional)
        /// </summary>
        public string? ThemeId { get; set; }

        /// <summary>
        /// Command version (default: 1.0)
        /// Version 2.0+ returns PaymentMethod in response
        /// Version 3.1+ returns IssuerName in response
        /// </summary>
        public string Version { get; set; } = "1.0";

        /// <summary>
        /// Merchant response page URL to receive SmartRoute response
        /// </summary>
        public string? ResponseBackUrl { get; set; }

        /// <summary>
        /// Channel to be used by SmartRoute
        /// 0 = Web, 1 = Mobile, 2 = Call Center
        /// </summary>
        public int Channel { get; set; } = 0;

        /// <summary>
        /// Quantity of purchased items (default: 1)
        /// </summary>
        public int Quantity { get; set; } = 1;

        /// <summary>
        /// Flag to generate token for card tokenization
        /// Values: "Yes" or "No"
        /// </summary>
        public string? GenerateToken { get; set; }

        /// <summary>
        /// Token representing previously used card information
        /// </summary>
        public string? Token { get; set; }

        /// <summary>
        /// Agreement ID for recurring payments
        /// Alphanumeric, max 20 characters
        /// </summary>
        public string? AgreementId { get; set; }

        /// <summary>
        /// Type of subsequent transactions
        /// Values: Recurring, Unscheduled, Other
        /// </summary>
        public string? AgreementType { get; set; }

        /// <summary>
        /// Preferred payment method
        /// Values: APPLEPAY, URPAY, STCPAY, SADAD_BILLING, EMKAN, TABBY, 
        /// GOOGLE_PAY, VISA, MASTERCARD, AMEX, MADA
        /// </summary>
        public string? PreferredPaymentMethod { get; set; }

        /// <summary>
        /// URL for failed payment reply (max 512 chars)
        /// </summary>
        public string? FailedPaymentReplyUrl { get; set; }
    }
}
