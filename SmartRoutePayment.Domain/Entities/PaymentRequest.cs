using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SmartRoutePayment.Domain.Entities
{
    /// <summary>
    /// Payment Request Entity for SmartRoute Direct Post Payment
    /// Contains all parameters required for payment processing
    /// </summary>
    public class PaymentRequest
    {
        // === Core Transaction Parameters ===

        /// <summary>
        /// Unique transaction identifier (max 20 characters, alphanumeric)
        /// Generated by merchant, must not include special characters or spaces
        /// </summary>
        public string TransactionId { get; set; } = string.Empty;

        /// <summary>
        /// Merchant ID provided by SmartRoute
        /// </summary>
        public string MerchantId { get; set; } = string.Empty;

        /// <summary>
        /// Payment amount in major currency unit (e.g., 10.50 SAR)
        /// Will be converted to smallest unit (fils/cents) before sending to SmartRoute
        /// </summary>
        public decimal Amount { get; set; }

        /// <summary>
        /// ISO currency code (numeric format)
        /// Example: 682 for SAR, 840 for USD
        /// </summary>
        public string CurrencyIsoCode { get; set; } = string.Empty;

        /// <summary>
        /// Message ID indicating the action type
        /// 1 = Payment, 2 = Pre-Authorization, 3 = Verify
        /// </summary>
        public int MessageId { get; set; }

        /// <summary>
        /// Quantity of items being purchased (default: 1)
        /// Numeric value greater than zero
        /// </summary>
        public int Quantity { get; set; } = 1;

        /// <summary>
        /// Channel through which the payment is initiated
        /// 0 = Web, 1 = Mobile, 2 = Call Center
        /// </summary>
        public int Channel { get; set; } = 0;

        /// <summary>
        /// Payment method identifier
        /// 1 = Card (includes Mada), 2 = Sadad, 5 = STCPay, 6 = Sadad Billing, 7 = Emkan, 8 = Tabby
        /// </summary>
        public int PaymentMethod { get; set; }

        // === Card Details (Conditional - Required when PaymentMethod = 1) ===
        // NOTE: These fields are excluded from secure hash generation for security

        /// <summary>
        /// Customer's card number (PAN)
        /// Required when PaymentMethod = 1 (Card)
        /// NOT included in secure hash
        /// </summary>
        public string CardNumber { get; set; } = string.Empty;

        /// <summary>
        /// Card expiry year in YY format (e.g., "25" for 2025)
        /// Required when PaymentMethod = 1 (Card)
        /// NOT included in secure hash
        /// </summary>
        public string ExpiryDateYear { get; set; } = string.Empty;

        /// <summary>
        /// Card expiry month in MM format (e.g., "12" for December)
        /// Required when PaymentMethod = 1 (Card)
        /// NOT included in secure hash
        /// </summary>
        public string ExpiryDateMonth { get; set; } = string.Empty;

        /// <summary>
        /// Card Security Code (CVV/CVC)
        /// Required when PaymentMethod = 1 (Card)
        /// NOT included in secure hash
        /// </summary>
        public string SecurityCode { get; set; } = string.Empty;

        /// <summary>
        /// Cardholder name as appears on the card
        /// Required when PaymentMethod = 1 (Card)
        /// NOT included in secure hash
        /// Spaces are allowed
        /// </summary>
        public string CardHolderName { get; set; } = string.Empty;

        // === Optional UI/Configuration Parameters ===

        /// <summary>
        /// Interface language (en = English, ar = Arabic)
        /// </summary>
        public string Language { get; set; } = string.Empty;

        /// <summary>
        /// Theme ID for UI customization
        /// </summary>
        public string ThemeId { get; set; } = string.Empty;

        /// <summary>
        /// API version
        /// 1.0 = Basic, 2.0+ = includes PaymentMethod in response, 3.1+ = includes IssuerName
        /// </summary>
        public string Version { get; set; } = string.Empty;

        /// <summary>
        /// Secure hash (SHA256) generated from request parameters
        /// Set by gateway before sending request
        /// </summary>
        public string SecureHash { get; set; } = string.Empty;

        /// <summary>
        /// Merchant's callback URL where SmartRoute sends payment response
        /// Optional if configured at merchant level
        /// </summary>
        public string ResponseBackURL { get; set; } = string.Empty;

        /// <summary>
        /// Payment description (UTF-8 encoded)
        /// Optional narrative description of the purchase
        /// </summary>
        public string PaymentDescription { get; set; } = string.Empty;

        /// <summary>
        /// Custom item identifier
        /// Optional alphanumeric value
        /// </summary>
        public string ItemId { get; set; } = string.Empty;

        // === Tokenization Parameters (Optional) ===

        /// <summary>
        /// Flag to generate token for card information
        /// "Yes" = generate token, "No" or null = don't generate
        /// </summary>
        public string GenerateToken { get; set; } = string.Empty;

        /// <summary>
        /// Previously generated token for recurring payments
        /// Used instead of card details when provided
        /// </summary>
        public string Token { get; set; } = string.Empty;

        // === Recurring Payment Parameters (Optional) ===

        /// <summary>
        /// Agreement ID for recurring payments (max 20 characters)
        /// Unique identifier for merchant-payer agreement
        /// </summary>
        public string AgreementId { get; set; } = string.Empty;

        /// <summary>
        /// Type of subsequent transactions
        /// Values: "Recurring", "Unscheduled", "Other"
        /// </summary>
        public string AgreementType { get; set; } = string.Empty;
    }
}
